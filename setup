#!/bin/sh

SETUP_RUBY_VERSION="2.2.2"
SETUP_NODE_VERSION="0.12.2"
SETUP_PYTHON_VERSION="2.7.9"

SCRIPT_PATH="$(cd $(dirname "${0}");pwd)"

IN_RUBY=0
IN_NODE=0
IN_PYTHON=0

while getopts :rnp OPT
do
	case $OPT in
		"r")
			IN_RUBY=1
			;;
		"n")
			IN_NODE=1
			;;
		"p")
			IN_PYTHON=1
			;;
		*)
			;;
	esac
done



cd ~
if [ ! -e ~/.zshrc ]; then
	ln -s "$SCRIPT_PATH/_zshrc" ~/.zshrc
elif [ ! -L ~/.zshrc ]; then
	echo "Replace .zshrc for dotfiles"
	mv ~/.zshrc ~/.zshrc.old
	ln -s "$SCRIPT_PATH/_zshrc" ~/.zshrc
fi
if [ ! -e ~/.vimrc ]; then
	ln -s "$SCRIPT_PATH/_vimrc" ~/.vimrc
elif [ ! -L ~/.vimrc ]; then
	echo "Replace .vimrc for dotfiles"
	mv ~/.vimrc ~/.vimrc.old
	ln -s "$SCRIPT_PATH/_vimrc" ~/.vimrc
fi
if [ ! -e ~/.gemrc ]; then
	ln -s "$SCRIPT_PATH/_gemrc" ~/.gemrc
elif [ ! -L ~/.gemrc ]; then
	echo "Replace .gemrc for dotfiles"
	mv ~/.gemrc ~/.gemrc.old
	ln -s "$SCRIPT_PATH/_gemrc" ~/.gemrc
fi
if [ ! -e ~/.tmux.conf ]; then
	ln -s "$SCRIPT_PATH/_tmux.conf" ~/.tmux.conf
elif [ ! -L ~/.tmux.conf ]; then
	echo "Replace .tmux.conf for dotfiles"
	mv ~/.tmux.conf ~/.tmux.conf.old
	ln -s "$SCRIPT_PATH/_tmux.conf" ~/.tmux.conf
fi

if [ ! -e ~/tmp/vim/undo ]; then
	mkdir -p ~/tmp/vim/undo
fi

# Environment of NeoBundle for Vim
if [ ! -e ~/.vim ]; then
   echo "No ~/.vim directory detected."
   mkdir -p ~/.vim/bundle
   echo "~/.vim directory created."
fi
if [ ! -e ~/.vim/bundle/neobundle.vim ]; then
   echo "No 'NeoBundle' for Vim plugin detected."
   echo "Installing NeoBundle..."
   git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
else
   echo "Updating NeoBundle..."
   cd ~/.vim/bundle/neobundle.vim
   git pull origin master
   cd ~
fi
vim +NeoBundleInstall +q


# Git setup
if [ ! -e ~/.config/git/attributes ]; then
	if [ ! -d ~/.config/git ]; then
		mkdir -p ~/.config/git
	fi
	cp -a "$SCRIPT_PATH/_config/git/attributes" ~/.config/git/attributes
fi
if [ ! -e ~/.gitignore ]; then
	cp -a "$SCRIPT_PATH/_config/git/ignore" ~/.gitignore
fi
# do git configuration
echo "Applying gitconfig..."
"$SCRIPT_PATH/gitconfig"

if [ ! -d ~/.zsh ]; then
	mkdir -p ~/.zsh
fi


# git completion
if [ ! -d ~/.zsh/completion ]; then
	mkdir -p ~/.zsh/completion
fi
if [ ! -f ~/.zsh/completion/git-completion.bash ]; then
	curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash > ~/.zsh/completion/git-completion.bash
fi
if [ ! -f ~/.zsh/completion/_git ]; then
	curl https://raw.github.com/git/git/master/contrib/completion/git-completion.zsh > ~/.zsh/completion/_git
fi


echo "Downloading submodules..."
git submodule update --init

if [ ! -e ~/.fonts ]; then
	echo "Setup fonts for powerline..."
	ln -s "$SCRIPT_PATH/_fonts" ~/.fonts
fi

if [ ! -e ~/.plugins ]; then
	echo "Setup plugins for powerline..."
	ln -s "$SCRIPT_PATH/_plugins" ~/.plugins
fi

if [ ! -d ~/.fonts.conf.d ]; then
	echo "Setup fonts config directory..."
	mkdir -p ~/.fonts.conf.d
fi
if [ ! -d ~/.fonts.conf.d/10-powerline-symbols.conf ] && [ -e ~/.plugins/tmux/powerline/font/10-powerline-symbols.conf ]; then
	cp ~/.plugins/tmux/powerline/font/10-powerline-symbols.conf ~/.fonts.conf.d/
fi
if [ ! -d ~/.fonts.conf.d/PowerlineSymbols.otf ] && [ -e ~/.plugins/tmux/powerline/font/PowerlineSymbols.otf ]; then
	cp ~/.plugins/tmux/powerline/font/PowerlineSymbols.otf ~/.fonts.conf.d/
fi


# Install homebrew
if [ ! -e /usr/local/Cellar ]; then
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Installing tig
if [ ! -e ~/bin/tig ]; then
	echo "Installing tig for git..."
	if [ ! -d ~/tmp ]; then
		mkdir -p ~/tmp
	fi
	if [ ! -e ~/tmp/tig ]; then
		pushd tmp
		git clone https://github.com/jonas/tig.git
		pushd tig
		make
		make install
		popd
		popd
	fi
fi

# Install rbenv
if [ $IN_RUBY -eq 1 ]; then
	if [ `command -v rbenv` &>/dev/null ]; then
		echo "rbenv is already installed."
		cd ~/.rbenv/plugins/ruby-build
		git pull origin master
		if [ `rbenv version | awk -F ' ' '{print $1}'` != "${SETUP_RUBY_VERSION}" ]; then
			echo "Install ruby-${SETUP_RUBY_VERSION} ..."
			rbenv install $SETUP_RUBY_VERSION
			rbenv rehash
		fi
		cd ~
	else
		if [ ! -e ~/.rbenv ]; then
			echo "Installing rbenv..."
			git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
		fi
		if [ ! -e ~/.rbenv/plugins ]; then
			mkdir -p ~/.rbenv/plugins
			git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
		fi
		export PATH="$HOME/.rbenv/bin:$PATH"
		eval "$(rbenv init -)"
		echo "Install ruby-${SETUP_RUBY_VERSION} ..."
		rbenv install $SETUP_RUBY_VERSION
		rbenv rehash
		rbenv local $SETUP_RUBY_VERSION
		rbenv global $SETUP_RUBY_VERSION
		cd ~
	fi
fi

# Install nvm
if [ $IN_NODE -eq 1 ]; then
	if [ ! -e ~/.nvm ]; then
		echo "Install nvm..."
		#curl https://raw.github.com/creationix/nvm/master/install.sh | sh
		git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`
		source ~/.nvm/nvm.sh
		echo "Install node-${SETUP_NODE_VERSION} ..."
		nvm install $SETUP_NODE_VERSION
		nvm use $SETUP_NODE_VERSION
		nvm alias default $SETUP_NODE_VERSION
	else
		echo "nvm is already installed."
	fi
fi

# Install pyenv
if [ $IN_PYTHON -eq 1 ]; then
	if [ `command -v pyent` >& /dev/null ]; then
		echo "pyenv is already installed."	
		if [ `pyenv version | awk -F ' ' '{print $1}'` != "${SETUP_PYTHON_VERSION}" ]; then
			echo "Install ruby-${SETUP_PYTHON_VERSION} ..."
			pyenv install $SETUP_PYTHON_VERSION
			pyenv rehash
		fi
		cd ~
	else
		echo "Installing pyenv..."
		if [ ! -e ~/.pyenv ]; then
			git clone https://github.com/yyuu/pyenv.git ~/.pyenv
		fi
		export PATH="$HOME/.pyenv/bin:$PATH"
		eval "$(pyenv init -)"
		echo "Install ruby-${SETUP_PYTHON_VERSION} ..."
		pyenv install $SETUP_PYTHON_VERSION
		pyenv rehash
		pyenv local $SETUP_PYTHON_VERSION
		pyenv global $SETUP_PYTHON_VERSION
		cd ~
	fi
fi


echo "Reload rc file."
source ~/.zshrc


